#!/bin/bash

source build_functions.sh

eclipse_core_prefs_header_status=0
eclipse_cproject_header_status=0

function eclipse_core_prefs_header {
    [ $eclipse_core_prefs_header_status -eq 0 ] && {
        eclipse_core_prefs_header_status=1
        echo "----------------------------------------------" >  $eclipse_core_prefs_patch_file
        echo "WARNING - THIS FILE IS AUTOMATICALLY GENERATED" >> $eclipse_core_prefs_patch_file
        echo "----------------------------------------------" >> $eclipse_core_prefs_patch_file
        echo                                                  >> $eclipse_core_prefs_patch_file
    }
}

function eclipse_cproject_header {
    [ $eclipse_cproject_header_status -eq 0 ] && {
        eclipse_cproject_header_status=1
        echo "----------------------------------------------" >  $eclipse_cproject_patch_file
        echo "WARNING - THIS FILE IS AUTOMATICALLY GENERATED" >> $eclipse_cproject_patch_file
        echo "----------------------------------------------" >> $eclipse_cproject_patch_file
        echo                                                  >> $eclipse_cproject_patch_file
    }
}

function get_conf_rpath {

        eclipse_core_prefs_header
        eclipse_cproject_header

        [ "$main_name" = "$mod_name" ] && {
            echo "environment/workspace/MAIN_NAME/delimiter=\:"            >> $eclipse_core_prefs_patch_file
            echo "environment/workspace/MAIN_NAME/operation=append"        >> $eclipse_core_prefs_patch_file
            echo "environment/workspace/MAIN_NAME/value=$main_name"        >> $eclipse_core_prefs_patch_file
            echo                                                           >> $eclipse_core_prefs_patch_file
            echo "environment/workspace/PLATFORM_NAME/delimiter=\:"        >> $eclipse_core_prefs_patch_file
            echo "environment/workspace/PLATFORM_NAME/operation=append"    >> $eclipse_core_prefs_patch_file
            echo "environment/workspace/PLATFORM_NAME/value=$platform"     >> $eclipse_core_prefs_patch_file
            echo                                                           >> $eclipse_core_prefs_patch_file
            echo_chk_clrd 1 33 "::::::"
        }

        while IFS= read -r conf_rpath; do

            ## echo_chk_clrd 1 35 "version: $version"
            conf_rpath=${conf_rpath#*set(}
            conf_rpath_name=${conf_rpath%% *}

            conf_rpath_value=${conf_rpath#*/}
            conf_rpath_value=${conf_rpath_value%)*}
            conf_rpath_value=${conf_rpath_value// }

            conf_rpath_where=${conf_rpath#*MAIN_XXX_SRC_}
            conf_rpath_where=${conf_rpath_where%_RPATH*}
            [ "$conf_rpath_where" = "COMMON" ] && {
                conf_rpath_value="common/$conf_rpath_value"
            }
            [ "$conf_rpath_where" = "PLATFORM" ] && {
                conf_rpath_value="$platform/$conf_rpath_value"
            }

            [ "$main_name" = "$mod_name" ] && {
                echo "environment/workspace/$conf_rpath_name/delimiter=\:"            >> $eclipse_core_prefs_patch_file
                echo "environment/workspace/$conf_rpath_name/operation=append"        >> $eclipse_core_prefs_patch_file
                echo "environment/workspace/$conf_rpath_name/value=$conf_rpath_value" >> $eclipse_core_prefs_patch_file
                echo                                                                  >> $eclipse_core_prefs_patch_file
                echo_chk_clrd 1 33 "::::::"
            }
            echo "<listOptionValue builtIn=\"false\" value=\"\${workspace_loc:/\${MAIN_NAME}/\${$conf_rpath_name}}\"/>" >> $eclipse_cproject_patch_file

            echo_chk_clrd 1 33 "conf_rpath:        $conf_rpath"
            echo_chk_clrd 1 33 "conf_rpath_name:   $conf_rpath_name"
            echo_chk_clrd 1 33 "conf_rpath_value:  $conf_rpath_value"
            echo_chk_clrd 1 33 "conf_rpath_where:  $conf_rpath_where"
            echo_chk_clrd 1 33 "....."

        done < <(cat "$conf_file_apath" | grep "^set(" | sort)


}
    

set_array_param=()
while (( $# ))
do
    set_array_param+=("$1")
    shift
done

param_parsing_cube_patch "${set_array_param[@]}"


folder_list=
while IFS= read -r folder; do
    
    echo $folder | grep "/wsp/" > /dev/null 2>&1 || {
        echo $folder | grep "/wsp$" > /dev/null 2>&1 || {
            count=$(cd $folder; ls -1 *.h *.hpp *.c *.cpp 2>/dev/null | wc -l)  
            [ $count -gt 0 ] && {
                folder_list+=($folder)
                echo_chk_clrd 1 33 "folder: $folder"
            }
        }
    }

done < <(find $module_root_apath -type d | sort -r)

echo_chk_clrd 1 35 "-- 0 ------+++++------"

#version_list=
[ "$versiondir_apath" ] && {

    while IFS= read -r version; do
        version_list+=("$version")
        echo "${version%% *}" | grep "_LIB_VER$" > /dev/null 2>&1 && {
            version_global="${version%% *}"
            version_global="${version_global#*set(}"
        }
        echo_chk_clrd 1 33  "$version"
        ## echo_chk_clrd 1 35 "version: $version"

    done < <(cat "$versiondir_apath/set_class_src_ver.cmake" | grep "set(" | sort)
    echo_chk_clrd 1 35 "-- 1 ------+++++------"

    eclipse_core_prefs_header

    [ "$version_global" ] && {
        echo "version global: $version_global" >> $eclipse_core_prefs_patch_file
        echo                                   >> $eclipse_core_prefs_patch_file
    }

    for version in "${version_list[@]}";
    do
        ## echo_chk_clrd 1 35 "version: $version"
        version=${version#*set(}

        version_val=${version%%)*}
        version_val=${version_val#* }
        version_val=${version_val// }

        version_ver="$mod_name""_${version%% *}"
        version_mod=${version%_VER*}
        version_mod=${version_mod//_}

        [ "$version" ] && {
            echo "environment/workspace/$version_ver/delimiter=\:"       
            echo "environment/workspace/$version_ver/operation=append"   
            echo "environment/workspace/$version_ver/value=$version_val" 
            echo                                                         
        }

    done >> $eclipse_core_prefs_patch_file
    echo_chk_clrd 1 35 "-- 2 ------+++++------"

}



eclipse_cproject_header

for folder in "${folder_list[@]}";
do
    base_name=$(basename "$folder")
    base_name_f2=${base_name:0:2}
    folder_patch="${folder#*_$mod_name/}"
    [ "$version_global" ] && {
        echo "$folder" | grep "$mod_name/src/v_" > /dev/null 2>&1 && {
            folder_patch_postfix=${folder#*$mod_name/src/v_}
            folder_patch_postfix=${folder_patch_postfix#*/}
            folder_patch="${folder%$mod_name/src/v_*}$mod_name/src/v_\${"$mod_name"_$version_global}/$folder_patch_postfix"
            folder_patch="${folder_patch#*_$mod_name/}"
        }
    }
    
    [ "$base_name_f2" = "v_" ] && {
        dir_name=$(dirname "$folder")
        module_name=$(basename "$dir_name")
        echo "$folder" | grep "/tb/" > /dev/null 2>&1 && {
            module_name=TB$module_name
        }

        for version in "${version_list[@]}";
        do
            version=${version#*set(}

            version_val=${version%%)*}
            version_val=${version_val#* }
            version_val=${version_val// }

            version_ver="$mod_name""_${version%% *}"
            version_mod=${version%_VER*}
            version_mod=${version_mod//_}
            echo "$version_mod" | grep -i "^$module_name$" > /dev/null 2>&1 && {
                folder_curr="${folder%v_*}v_$version_val"
                [ -d "$folder_curr" ] && {
                    count=$(cd $folder_curr; ls -1 *.h *.hpp 2>/dev/null | wc -l)  
                    [ $count -gt 0 ] && {
                        echo "<listOptionValue builtIn=\"false\" value=\"\${workspace_loc:/$mod_name/${folder_patch%v_*}v_\${$version_ver}}\"/>"
                        echo "<entry flags=\"VALUE_WORKSPACE_PATH\" kind=\"sourcePath\" name=\"${folder_patch%v_*}v_\${$version_ver}\"/>"
                    } || {
                        count=$(cd $folder_curr; ls -1 *.c *.cpp 2>/dev/null | wc -l)  
                        [ $count -gt 0 ] && {
                            echo "<entry flags=\"VALUE_WORKSPACE_PATH\" kind=\"sourcePath\" name=\"${folder_patch%v_*}v_\${$version_ver}\"/>"
                        }
                    }
                } || {
                    echo_chk_clrd 1 31 "WARNING - The \"$folder_curr\" folder does not exists"
                }
                break
            }
        done || {
            echo_chk_clrd 1 31 "ERROR - The \"$folder\" folder has not the version definition"
        }

    } || {
        count=$(cd $folder; ls -1 *.h *.hpp 2>/dev/null | wc -l)  
        [ $count -gt 0 ] && {
            echo "<listOptionValue builtIn=\"false\" value=\"\${workspace_loc:/$mod_name/$folder_patch}\"/>"
            echo "<entry flags=\"VALUE_WORKSPACE_PATH\" kind=\"sourcePath\" name=\"$folder_patch\"/>"
        } || {
            count=$(cd $folder; ls -1 *.c *.cpp 2>/dev/null | wc -l)  
            [ $count -gt 0 ] && {
                echo "<entry flags=\"VALUE_WORKSPACE_PATH\" kind=\"sourcePath\" name=\"$folder_patch\"/>"
            }
        }
    }
    # create directory

    # add .gitkeep file

done | sort | uniq >> $eclipse_cproject_patch_file

get_conf_rpath
